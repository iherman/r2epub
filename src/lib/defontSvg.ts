/**
 * ## Handle a nasty bug in some SVG files
 *
 * SVG files generated by draw.io (fairly widely used in W3C documents) have a nasty bug: they use the deprecated
 * `<font>` element of HTML. Because epubcheck is very strict, it labels those SVG files as erroneous (although they
 * do display properly). This hook replaces the font elements by a `<span>`. (It seems that the draw.io files do include
 * the right `style` attribute in those elements, so it is really an unnecessary usage.)
 *
 * NOTE THAT THIS DOES NOT ALWAYS WORK! In some cases the generated span element finds itself in a wrong place.
 *
 * The only reasonable thing to do is for draw.io to avoid doing this.
 *
 * @packageDocumentation
*/

import { JSDOM } from 'jsdom';

/**
 * Replace all occurrences of the `<font>` element in the SVG file by a `<span>`.
 *
 * Hopefully, this module can be removed, eventually, because draw.io will not generate such diagrams. (Although the module
 * may have to remain after all to ensure backward compatibilityâ€¦)
 *
 * @param svg_text
 * @returns
 */
export function deFontSvg(svg_text: string): string {
    const dom = new JSDOM(svg_text, { contentType: "image/svg+xml" });
    const svg = dom.window.document;
    // 2: take care of the svg font elements
    const fonts = Array.from(svg.getElementsByTagName('font'));
    for (const font of fonts) {
        if (font !== null) {
            const span = svg.createElement('span');
            // add all the attributes of font, except some illegals, to
            // span
            for (let j = 0; j < font.attributes.length; j++) {
                const attr = font.attributes[j];
                if (!['size', 'color', 'face'].includes(attr.name)) {
                    // copy the attribute to span
                    span.setAttribute(attr.name, attr.value);
                }
            }

            while (font.firstChild) {
                span.appendChild(font.firstChild);
            }
            font.parentNode?.replaceChild(span, font);
        }
    }
    return new dom.window.XMLSerializer().serializeToString(svg);
}
